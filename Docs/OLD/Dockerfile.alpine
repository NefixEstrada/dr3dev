FROM alpine:latest AS builder

RUN apk add --no-cache \
		ca-certificates

# set up nsswitch.conf for Go's "netgo" implementation
# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
RUN [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf

ENV GOLANG_VERSION 1.11.5

RUN set -eux; \
	apk add --no-cache --virtual .build-deps \
		bash \
		gcc \
		musl-dev \
		openssl \
		go \
	; \
	export \
# set GOROOT_BOOTSTRAP such that we can actually build Go
		GOROOT_BOOTSTRAP="$(go env GOROOT)" \
# ... and set "cross-building" related vars to the installed system's values so that we create a build targeting the proper arch
# (for example, if our build host is GOARCH=amd64, but our build env/image is GOARCH=386, our build needs GOARCH=386)
		GOOS="$(go env GOOS)" \
		GOARCH="$(go env GOARCH)" \
		GOHOSTOS="$(go env GOHOSTOS)" \
		GOHOSTARCH="$(go env GOHOSTARCH)" \
	; \
# also explicitly set GO386 and GOARM if appropriate
# https://github.com/docker-library/golang/issues/184
	apkArch="$(apk --print-arch)"; \
	case "$apkArch" in \
		armhf) export GOARM='6' ;; \
		x86) export GO386='387' ;; \
	esac; \
	\
	wget -O go.tgz "https://golang.org/dl/go$GOLANG_VERSION.src.tar.gz"; \
	echo 'bc1ef02bb1668835db1390a2e478dcbccb5dd16911691af9d75184bbe5aa943e *go.tgz' | sha256sum -c -; \
	tar -C /usr/local -xzf go.tgz; \
	rm go.tgz; \
	\
	cd /usr/local/go/src; \
	./make.bash; \
	\
	rm -rf \
# https://github.com/golang/go/blob/0b30cf534a03618162d3015c8705dd2231e34703/src/cmd/dist/buildtool.go#L121-L125
		/usr/local/go/pkg/bootstrap \
# https://golang.org/cl/82095
# https://github.com/golang/build/blob/e3fe1605c30f6a3fd136b561569933312ede8782/cmd/release/releaselet.go#L56
		/usr/local/go/pkg/obj \
	; \
	apk del .build-deps; \
	\
	export PATH="/usr/local/go/bin:$PATH"; \
	go version

FROM alpine:latest

LABEL maintainer Didac Oliveira "didac@drlm.org"

RUN [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf && \
	apk --no-cache add \
		ca-certificates openssl \
		gcc musl-dev \
		python3 python3-dev py3-pip \
		sudo git bash curl busybox \
		tmux neovim && \
#	update-ca-certificates && \
	# Install neovim python support
	pip3 install neovim && \
#	chgrp -R users . && \
	curl -LO 'https://raw.github.com/petervanderdoes/gitflow-avh/develop/contrib/gitflow-installer.sh' && sh gitflow-installer.sh install stable && rm gitflow-installer.sh && \
	rm -rf /var/cache/apk/*

COPY --from=builder /usr/local/go /usr/local/go

# Create User
ARG MYUSERNAME=developer
ARG	MYUID=1000
ARG	MYGID=1000

ENV MYUSERNAME=${MYUSERNAME}\
	MYUID=${MYUID} \
	MYGID=${MYGID} \
	LANG=en_US.UTF-8 \
	LC_ALL=en_US.UTF-8 \
	LANGUAGE=en_US.UTF-8 \
	HOME=/home/${MYUSERNAME} \
	GOPATH=/home/${MYUSERNAME}/go \
	PATH=$GOPATH/bin:/usr/local/go/bin:$PATH \
	TERM=xterm-256color

RUN addgroup -S -g ${MYGID} ${MYUSERNAME} && \
	adduser -S ${MYUSERNAME} -u ${MYUID} -g ${MYGID} -s /bin/bash -G users && \
	echo "${MYUSERNAME} ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/${MYUSERNAME} && \
	chmod 0440 /etc/sudoers.d/${MYUSERNAME} && \
	mkdir -p "$GOPATH/src" "$GOPATH/bin" && chown -R ${MYUID}:${MYGID} "$GOPATH"

COPY files/init.vim /home/${MYUSERNAME}/.config/nvim/init.vim
COPY files/tmux.conf /home/${MYUSERNAME}/.tmux.conf

RUN sudo -u ${MYUSERNAME} bash -c 'nvim --headless +PlugInstall +UpdateRemotePlugins +qall && nvim --headless  +GoInstallBinaries +qall'

USER ${MYUSERNAME}

WORKDIR /home/${MYUSERNAME}

CMD ["bash"]
